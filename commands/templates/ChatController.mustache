'use strict'
const Twilio = use('Adonis/TwilioService')
const validator = use('Validator')

class ChatController {
    async getToken({request, response, user}) {

        const deviceId = request.body().deviceId
        if(!deviceId) return response.badRequest('chat.error.noDeviceId')

        const token = await Twilio.generateToken(user.id, deviceId)
        response.ok({token})
    }

    async createChat({request, response, user}) {
        let allParams = request.only(['users', 'additional', 'name', 'type'])

        let rules = {
            users: 'array',
            name: 'string|required',
            type: 'string|required|in:public,private'
        }
        let validation = await validator.validate(allParams, rules)
        if(validation.fails()) return response.badRequest(validation.messages())

        let data = {
            friendlyName: allParams.name,
            type: allParams.type
        }
        if(allParams.additional) data.attributes = allParams.additional

        const chatData = await Twilio.createChat(data, user.id, allParams.users)

        response.ok(chatData)
    }

    async getPossibleActions({request, response, params, user}) {

        const possibleActions = await Twilio.getPossibleActions(user.id, params.sid)

        response.ok(possibleActions)
    }

    async addVideo({request, response, params, user}) {
        if (!await Twilio.getMember(params.sid, user.id)) return response.forbidden('chat.error.notOnChat')
        return await Twilio.addVideoToChat(params.sid)
    }

    async removeVideo({request, response, params, user}) {
        if (!await Twilio.getMember(params.sid, user.id)) return response.forbidden('chat.error.notOnChat')
        return await Twilio.endVideoOnChat(params.sid)
    }

}

module.exports = ChatController